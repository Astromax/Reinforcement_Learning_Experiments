# -*- coding: utf-8 -*-
"""Replays.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d1P7-9TelRH4XPvmR2BV_y8L4Z5cmWmo
"""

from collections import deque
from collections import namedtuple

import numpy as np
import random
import torch

#Basic, uniform experience replay buffer
class ReplayBuffer:
    """Fixed-size buffer to store experience tuples."""
    def __init__(self, action_size: int, buffer_size: int, batch_size: int, seed: int, device: torch.device):
        self.action_size = action_size
        self.memory = deque(maxlen=buffer_size)
        self.batch_size = batch_size
        self.experience = namedtuple('Experience', field_names=['state', 'action', 'reward', 'next_state', 'done'])
        self.seed = random.seed(seed)
        self.device = device
        
    def add(self, state: np.array, action: int, reward: float, next_state: np.array, done: bool) -> None:
        """Add a new experience to memory."""
        e = self.experience(state, action, reward, next_state, done)
        self.memory.append(e)
        
    def sample(self) -> tuple:
        """Randomly sample a batch of experiences from memory."""
        experiences = random.sample(self.memory, k=self.batch_size)

        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(self.device)
        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(self.device)
        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(self.device)
        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(self.device)
        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(self.device)
  
        return (states, actions, rewards, next_states, dones)

    def __len__(self) -> int:
        """Return the current size of internal memory."""
        return len(self.memory)

#Prioritized Experience Replay Buffer
class PrioritizedExperienceReplay:
    
    """Fixed-size buffer to store experience tuples, with TD-errors for priority calculation."""
    def __init__(self, action_size: int, buffer_size: int, batch_size: int, alpha: float, seed: int, device: torch.device):
        self.action_size = action_size
        self.memory = deque(maxlen=buffer_size)
        self.batch_size = batch_size
        self.experience = namedtuple('Experience', field_names=['state', 'action', 'reward', 'next_state', 'done', 'TD_error'])
        self.alpha = alpha
        self.seed = random.seed(seed)
        self.device = device
    

    def add(self, state: np.array, action: int, reward: float, next_state: np.array, done: bool, TD_error: float) -> None:
        """Add a new experience to memory."""
        e = self.experience(state, action, reward, next_state, done, TD_error)
        self.memory.append(e)

        
    def sample(self, rank: bool=False) -> tuple:
        """Sample a batch of experiences according to priority"""
        if rank:
            #This is rank-based prioritization, might be slow with this implementation...
            sorted_TD_errors = sorted([e.TD_error.item() for e in self.memory], reverse=True)
            rankings = [sorted_TD_errors.index(e.TD_error.item()) for e in self.memory]    #Get ranks of each experience
            raw_priorities = torch.tensor([1/(idx + 1) for idx in rankings])                   #Invert to get raw priorities
        else:
            #This is magnitude-based prioritization
            epsilon = 1e-5                                                                       #Safety parameter
            raw_priorities = torch.add(torch.tensor([e.TD_error for e in self.memory]), epsilon) #Add safety 
        
        scaled_priorities = torch.pow(raw_priorities, self.alpha)                      #Blend with the uniform distribution
        priority_sum = torch.sum(scaled_priorities)                                    #Get sum of priorities
        probs = scaled_priorities/priority_sum                                         #Convert priorities into probabilities
        
        #Select the indices of the experiences to be used
        indices = np.random.choice(np.arange(len(self.memory)), size=self.batch_size, replace=False, p = np.array(probs))
        probabilities = torch.tensor([probs[idx] for idx in indices])
        experiences = [self.memory[idx] for idx in indices]

        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(self.device)
        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(self.device) 
        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(self.device)
        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(self.device)
        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(self.device)
  
        return indices, probabilities, (states, actions, rewards, next_states, dones)
                                     
                                     
    def update(self, indices: np.array, TD_errors: torch.tensor) -> None:
        for idx, tde in zip(indices, TD_errors):
            s,a,r,n,d,td = self.memory[idx]
            newmem = self.experience(s,a,r,n,d,tde)
            self.memory[idx] = newmem
                               
                
    def __len__(self) -> int:
        """Return the current size of internal memory."""
        return len(self.memory)